import React, { Fragment, useState, useEffect, useRef } from 'react';
import { useForm } from 'react-hook-form';
import { SquareButton } from '../../../atoms/SquareButton';
import { FormRow } from '../../../molecules/FormRow';
import { Layout } from '../../../templates/Layout';
import {
  Typography,
  Box,
  FormControl,
  RadioGroup,
  FormControlLabel,
  Radio,
  Checkbox,
  TextField,
} from '@mui/material';
import makeStyles from '@mui/styles/makeStyles';
import withStyles from '@mui/styles/withStyles';
import { loadStripe } from '@stripe/stripe-js';
import { Elements } from '@stripe/react-stripe-js';

import { COLOR } from 'theme';
import { WayGiftType, WayRecipientType, PaymentIntentResponse } from 'constants/index';

// Make sure to call loadStripe outside of a component’s render to avoid
// recreating the Stripe object on every render.
// This is your test publishable API key.
const stripePromise = loadStripe(
  process.env.REACT_APP_STRIPE_PUBLISHABLE_API_KEY as string
);

const useStyles = makeStyles({
  formRoot: {
    width: '100%',
  },
  radioForm: {
    '& label': {
      margin: 0,
    },
    '& span': {
      fontSize: '12px',
    },
    '& span.MuiButtonBase-root': {
      padding: '5px',
    },
    '& .Mui-checked': {
      color: COLOR.primaryNavy,
    },
  },
  messageCount: {
    paddingTop: '4px',
    display: 'flex',
    justifyContent: 'space-between',
    color: COLOR.brandNameGray,
    '& p': {
      textAlign: 'end',
      fontSize: '12px',
      letterSpacing: '1px',
      marginBottom: 0,
    },
  },
  messageInvalid: {
    color: COLOR.alertRed,
  },
  section: {
    fontSize: '16px',
    fontWeight: 700,
  },
  caution: {
    fontSize: '12px',
    fontWeight: 400,
    letterSpacing: 0,
    marginTop: '10px',
  },
  instruction: {
    backgroundColor: COLOR.primaryNavy,
    borderRadius: '5px',
    padding: '1rem 1rem 0 1rem',
    color: COLOR.textWhite,
    fontSize: '14px',
    marginBottom: '3rem',
    '& > p': {
      color: COLOR.textWhite,
      padding: '0 1rem 1rem 0',
      lineHeight: 'normal',
    },
  },
  price: {
    margin: '1.5rem 0 1.5rem 0',
    '& > p': {
      fontSize: '16px',
      fontWeight: 700,
    },
  },
  checkboxForm: {
    '& .MuiFormControlLabel-label': {
      fontSize: '14px',
    },
    '& .Mui-checked': {
      color: COLOR.primaryNavy,
    },
    '& .MuiIconButton-colorSecondary:hover': {
      // change opacity
      backgroundColor: `${COLOR.primaryNavy}11`,
    },
  },
});

const MessageField = withStyles({
  root: {
    '& .MuiFilledInput-root': {
      backgroundColor: COLOR.formGrey,
      padding: '12px 10px',
    },
    '& label.Mui-focused': {
      color: COLOR.formGrey,
    },
    '& .MuiFilledInput-multiline': {
      padding: '10px',
    },
    '& .MuiInputBase-inputMultiline': {
      fontSize: '16px',
    },
    '& .MuiFilledInput-root:hover:not(.Mui-disabled):before': {
      borderBottom: 'none',
    },
    '& .MuiFilledInput-underline:before': {
      borderBottom: 'none',
    },
    '& .MuiFilledInput-underline:after': {
      borderBottom: 'none',
    },
  },
})(TextField);

export type Props = {
  skipStripe: boolean;
  sender: {
    name?: string;
    email?: string;
    phone?: string;
    message: string;
    isNewsletter: boolean;
    onChangeName: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onChangeEmail: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onChangePhone: (event: React.ChangeEvent<HTMLInputElement>) => void;
    setMessage: (message: string) => void;
    selectedItems: string[];
    toggleNewsLetter: () => void;
    children?: React.ReactNode;
  };
  waygift: WayGiftType;
  recipient: {
    name?: string;
    postalCode?: string;
    address?: string;
    phone?: string;
    onChangeName: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onChangePostalCode: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onChangeAddress: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onChangePhone: (event: React.ChangeEvent<HTMLInputElement>) => void;
  };
  wayrecipient: {
    value: WayRecipientType;
    onClickSendToMe: () => void;
    onClickSendToOthers: () => void;
  };
  price: number;
  children?: React.ReactNode;
  paymentIntentResponse: PaymentIntentResponse;
  setPaymentIntentResponse: (arg: PaymentIntentResponse) => void;
};

export function CheckOutForm({
  sender,
  waygift,
  recipient,
  wayrecipient,
  price,
  children,
  skipStripe = false,
  paymentIntentResponse,
  setPaymentIntentResponse,
}: Props) {
  const { register, handleSubmit, errors } = useForm({
    mode: 'onSubmit',
    reValidateMode: 'onBlur',
  });

  // validation の成否
  const [validateOk, setValidateOk] = useState(false);
  const { name, phone, email, message, isNewsletter } = sender;
  useEffect(() => {
    setValidateOk(false);
  }, [name, phone, email, message, isNewsletter, price]);

  // メッセージ入力
  const [isMessageInvalid, setIsMessageInvalid] = useState(false);
  const maxMessageLength = 300;
  useEffect(() => {
    sender.message.length > maxMessageLength
      ? setIsMessageInvalid(true)
      : setIsMessageInvalid(false);
  }, [sender.message]);

  // 送付先のラジオ選択が変わるとフォームの内容変わるので再度バリデートさせる
  /* useEffect(() => { */
  /*   setValidateOk(false); */
  /* }, [wayrecipient]); */

  const onSubmit = () => {
    setValidateOk(true);
  };
  const classes = useStyles();

  // カーソルが真ん中あたりに来ることがあるので
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  // 決済フォームが出たことがわかりずらいので、scroll させる
  const paymentWrapperRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    const html = document.querySelector('html');
    if (validateOk) {
      html!.style.scrollBehavior = 'smooth';
      paymentWrapperRef.current?.scrollIntoView();
    }
    return () => {
      html!.style.scrollBehavior = 'auto';
    };
  }, [validateOk]);

  // get stripe client secret
  useEffect(() => {
    if (!skipStripe && validateOk) {
      fetch(`${process.env.REACT_APP_CLOUD_RUN_CADU_API_URL}/card`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          selected: sender.selectedItems,
          idToken: 'NOIDTOKENFORNOW',
          amount: price,
          message: sender.message.trim(),
          name: sender.name,
          email: sender.email,
          phone: sender.phone,
          isNewsletter: sender.isNewsletter,
        }),
      })
        .then((res) => res.json())
        .then((data) => setPaymentIntentResponse(data));
    }
  }, [validateOk]);
  // styling: https://stripe.com/docs/stripe-js/appearance-api
  const stripeAppearance = {
    // なぜかerror になるのでキャストする
    theme: 'flat' as 'none' | 'flat' | 'stripe' | 'night' | undefined,
    variables: {
      // web fonts not work on some iOS devices
      fontFamily: '"Noto Sans JP", -apple-system, sans-serif',
      borderRadius: '0px',
      colorBackground: COLOR.formGrey,
    },
    rules: {
      '.Label': {
        color: '#000000',
        marginTop: '5px',
        marginBottom: '8px',
        letterSpacing: '0.5px',
        fontSize: '12px',
      },
      '.Error': {
        fontSize: '12px',
        paddingTop: '6px',
      },
      '.Input': {
        fontSize: '16px',
        lineHeight: '20px',
        padding: '12px 10px',
        borderTopLeftRadius: '4px',
        borderTopRightRadius: '4px',
      },
      '.Tab': {
        borderTopLeftRadius: '4px',
        borderTopRightRadius: '4px',
      },
    },
  };
  const stripeOptions = {
    fonts: [
      {
        cssSrc: 'https://fonts.googleapis.com/css2?family=Noto+Sans+JP&display=swap',
      },
    ],
    clientSecret: paymentIntentResponse.ClientSecret,
    appearance: stripeAppearance,
    locale: 'ja' as 'ja', // string type causes error
  };

  const isChildrenVisible = validateOk;

  return (
    <Layout>
      <Box
        display="flex"
        justifyContent="space-between"
        width="100%"
        className={classes.price}
      >
        <Typography>合計金額（送料込み）</Typography>
        <Typography>{`${price.toLocaleString('en-US')} 円（税込）`}</Typography>
      </Box>
      <Box display="flex" className={classes.instruction}>
        <Typography>
          ギフト受取用URLをお相手にSNSやメール等で送り、お相手が住所等を入力することでギフトが届きます。
        </Typography>
        <img width="76px" src="/assets/gift-sending.png" />
      </Box>
      <Box width="100%" my={1} pb={1}>
        <Typography className={classes.section}>購入者情報（必須）</Typography>
        <Typography className={classes.caution}>
          ※ 贈るお相手ではなく、ご自身の情報を入力してください。
        </Typography>
      </Box>
      <form onSubmit={handleSubmit(onSubmit)} className={classes.formRoot}>
        <FormRow
          label="お名前"
          value={sender.name}
          onChange={sender.onChangeName}
          type="text"
          id="senderName"
          register={() => ({
            required: true,
          })}
          invalid={!!errors.senderName}
          errorMessage="お名前に誤りがあります。"
        />
        <FormRow
          label="メールアドレス"
          value={sender.email}
          onChange={sender.onChangeEmail}
          type="email"
          id="senderEmail"
          register={register({
            required: true,
            pattern: /^[a-zA-Z0-9_.+-]+@([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\.)+[a-zA-Z]{2,}$/,
          })}
          invalid={!!errors.senderEmail}
          errorMessage="メールアドレスに誤りがあります。"
        />
        <FormRow
          label="電話番号(ハイフンなし)"
          value={sender.phone}
          onChange={sender.onChangePhone}
          type="tel"
          id="senderPhone"
          register={register({
            required: true,
            pattern: /^[0-9]{10,11}$/,
          })}
          invalid={!!errors.senderPhone}
          errorMessage="電話番号に誤りがあります。"
        />
        <FormControlLabel
          className={classes.checkboxForm}
          label="最新情報やお知らせなどを受け取る"
          control={
            <Checkbox checked={sender.isNewsletter} onClick={sender.toggleNewsLetter} />
          }
        />
        <Box pt={5} pb={3}>
          <Typography className={classes.section}>メッセージ（任意）</Typography>
        </Box>
        <Box textAlign="start">
          <MessageField
            placeholder="メッセージを入力してください（任意）"
            multiline
            rows={4}
            fullWidth
            defaultValue={sender.message}
            variant="filled"
            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
              sender.setMessage(e.target.value)
            }
          />
        </Box>
        <Box mb={4} className={classes.messageCount}>
          <p>300文字以内</p>
          <Box>
            <p>{sender.message.length} / 300</p>
            {isMessageInvalid ? (
              <p className={classes.messageInvalid}>300文字を超えています</p>
            ) : undefined}
          </Box>
        </Box>

        <Box mt={5} mb={5}>
          {/* this button fires form's submit event */}
          <SquareButton
            buttonType="primary"
            type="submit"
            fullWidth
            inactive={isChildrenVisible}
          >
            決済へ進む
          </SquareButton>
        </Box>
      </form>
      <div
        // Eギフトの際は常に表示. 直接送る際は送付先が選ばれてから表示
        // 事前にロードしたいので、スタイリングで表示・非表示を制御
        // Box だと ref を利用できないので div 利用
        style={{
          width: '100%',
          marginBottom: '4rem',
          display: isChildrenVisible ? 'block' : 'none',
        }}
        ref={paymentWrapperRef}
      >
        <Box pt={2} pb={2}>
          <Typography className={classes.section}>決済情報（必須）</Typography>
        </Box>
        {skipStripe ? (
          <Fragment>{children}</Fragment>
        ) : (
          <Fragment>
            {!!paymentIntentResponse.ClientSecret ? (
              <Elements options={stripeOptions} stripe={stripePromise}>
                {children}
              </Elements>
            ) : (
              <Typography>Loading...</Typography>
            )}
          </Fragment>
        )}
      </div>
    </Layout>
  );
}
